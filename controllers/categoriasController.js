// ======================================================
// üéØ CONTROLADOR DE CATEGOR√çAS
// ======================================================

const categoriasModel = require("../models/categoriasModel");
const getConexion = require("../config/mysql");

// ======================================================
// üì¶ OBJETO CONTROLADOR
// ======================================================
const categoriasController = {
  // ======================================================
  // 1Ô∏è‚É£ Obtener todas las categor√≠as
  // ======================================================
  async obtenerTodas(req, res) {
    try {
      const categorias = await categoriasModel.getAll();
      res.status(200).json(categorias);
    } catch (error) {
      console.error("‚ùå Error al obtener categor√≠as:", error);
      res.status(500).json({ error: "Error interno del servidor" });
    }
  },

  // ======================================================
  // 2Ô∏è‚É£ Obtener una categor√≠a por ID
  // ======================================================
  async obtenerPorId(req, res) {
    try {
      const { id } = req.params;
      const categoria = await categoriasModel.getById(id);

      if (!categoria) {
        return res.status(404).json({ mensaje: "Categor√≠a no encontrada" });
      }

      res.status(200).json(categoria);
    } catch (error) {
      console.error("‚ùå Error al obtener categor√≠a:", error);
      res.status(500).json({ error: "Error interno del servidor" });
    }
  },

  // ======================================================
  // 3Ô∏è‚É£ Crear una nueva categor√≠a o subcategor√≠a
  // ======================================================
  async crear(req, res) {
    try {
      const { nombre, descripcion, parent_id } = req.body;

      if (!nombre || nombre.trim() === "") {
        return res
          .status(400)
          .json({ mensaje: "El campo 'nombre' es obligatorio" });
      }

      // ‚úÖ parent_id puede ser nulo o num√©rico (para subcategor√≠as)
      const nuevaCategoria = await categoriasModel.create({
        nombre,
        descripcion,
        parent_id: parent_id || null,
      });

      res.status(201).json({
        mensaje: parent_id
          ? "‚úÖ Subcategor√≠a creada correctamente"
          : "‚úÖ Categor√≠a ra√≠z creada correctamente",
        data: nuevaCategoria,
      });
    } catch (error) {
      console.error("‚ùå Error al crear categor√≠a:", error);
      res.status(500).json({ error: "Error interno del servidor" });
    }
  },

  // ======================================================
  // 4Ô∏è‚É£ Actualizar una categor√≠a existente
  // ======================================================
  async actualizar(req, res) {
    try {
      const { id } = req.params;
      const { nombre, descripcion } = req.body;

      if (!nombre || nombre.trim() === "") {
        return res
          .status(400)
          .json({ mensaje: "El campo 'nombre' es obligatorio" });
      }

      const categoriaActualizada = await categoriasModel.update(id, {
        nombre,
        descripcion,
      });

      res.status(200).json({
        mensaje: "‚úÖ Categor√≠a actualizada correctamente",
        data: categoriaActualizada,
      });
    } catch (error) {
      console.error("‚ùå Error al actualizar categor√≠a:", error);
      res.status(500).json({ error: "Error interno del servidor" });
    }
  },

  // ======================================================
  // 5Ô∏è‚É£ Eliminar una categor√≠a (borrado l√≥gico + verificaci√≥n)
  // ======================================================
  async eliminar(req, res) {
    try {
      const { id } = req.params;
      const conexion = await getConexion();

      // üîç Verificar si hay productos asociados a esta categor√≠a
      const [productos] = await conexion.query(
        "SELECT COUNT(*) AS total FROM productos WHERE id_categoria = ?",
        [id]
      );

      if (productos[0].total > 0) {
        return res.status(400).json({
          mensaje:
            "‚ùå No se puede eliminar la categor√≠a porque tiene productos asociados.",
        });
      }

      // üóÉÔ∏è Si no tiene productos ‚Üí se desactiva la categor√≠a (estado = 0)
      const [resultado] = await conexion.query(
        "UPDATE categorias SET estado = 0 WHERE id_categoria = ?",
        [id]
      );

      if (resultado.affectedRows === 0) {
        return res.status(404).json({ mensaje: "‚ùå Categor√≠a no encontrada." });
      }

      res.status(200).json({
        mensaje: "‚úÖ Categor√≠a desactivada correctamente.",
      });
    } catch (error) {
      console.error("üí• Error al eliminar categor√≠a:", error);
      res.status(500).json({
        error: "Error interno del servidor",
        detalle: error.message,
      });
    }
  },

  // ======================================================
  // üå≥ 6Ô∏è‚É£ CONTROLADOR - CATEGOR√çAS JER√ÅRQUICAS (FASE 2)
  // ======================================================

  // ‚úÖ Obtener categor√≠as ra√≠z (sin padre)
  async obtenerCategoriasRaiz(req, res) {
    try {
      const categorias = await categoriasModel.getCategoriasByParentId(null);
      res.status(200).json(categorias);
    } catch (error) {
      console.error("‚ùå Error al obtener categor√≠as ra√≠z:", error);
      res.status(500).json({ error: "Error interno del servidor" });
    }
  },

  // ‚úÖ Obtener subcategor√≠as de una categor√≠a espec√≠fica
  async obtenerSubcategorias(req, res) {
    try {
      const { id } = req.params;
      const categorias = await categoriasModel.getCategoriasByParentId(id);
      res.status(200).json(categorias);
    } catch (error) {
      console.error("‚ùå Error al obtener subcategor√≠as:", error);
      res.status(500).json({ error: "Error interno del servidor" });
    }
  },

  // ‚úÖ Obtener jerarqu√≠a completa de categor√≠as y subcategor√≠as
  async obtenerJerarquia(req, res) {
    try {
      const data = await categoriasModel.getJerarquiaCompleta();
      res.status(200).json(data);
    } catch (error) {
      console.error("‚ùå Error al obtener jerarqu√≠a:", error);
      res.status(500).json({ error: "Error interno del servidor" });
    }
  }
};

// ======================================================
// üì§ EXPORTAR CONTROLADOR
// ======================================================
module.exports = categoriasController;